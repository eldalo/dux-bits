var game = new Phaser.Game(960, 450, Phaser.AUTO, 'phaser-game');
    bits = {};

var bg, random_speakers, max_speakers, state = true;

bits.load = function() {};
bits.load.prototype = {
    preload: function() {
        game.load.onLoadStart.add(this.onInit, this);
        game.load.onFileComplete.add(this.onFile, this);
        game.load.onLoadComplete.add(this.onComplete, this);

        game.load.spritesheet( 'background', base_url + 'img/sprites/spritesheet-bg.jpg', 2880, 450 );
        game.load.spritesheet( 'dux', base_url + 'img/sprites/spritesheet-dux.png', 71, 79 );
        game.load.spritesheet( 'snak', base_url + 'img/sprites/spritesheet-snak.png', 89, 89 );
        game.load.spritesheet( 'special', base_url + 'img/sprites/spritesheet-special.png', 89, 95 );
        game.load.spritesheet( 'speaker', base_url + 'img/sprites/spritesheet-speaker.png', 69, 69 );

        game.load.image( 'point', base_url + 'img/sprites/point.png' );
        game.load.audio( 'levels', base_url + 'includes/sound/bits-sound.mp3' );

        game.stage.backgroundColor = '#0a3c8c';
        game.transparent = true;

        game.load.start();
    },
    onInit: function() {
        music = game.add.audio('levels');

        music.addMarker('1', 1, 58.9);
        music.addMarker('2', 60.0, 60.5);
        music.addMarker('3', 121.0, 59.0);
        music.addMarker('4', 180.0, 59.0);
        music.addMarker('5', 240.0, 60.0);
    },
    onComplete: function() {
        game.state.start('main');
    },
    onFile: function(progress, cacheKey, success, totalLoaded, totalFiles) {
        if (progress == '100') {
            $('#preload #percentage span').html( '90%' );
            // $('#preload #percentage').css("background-image", "url(" + base_url + "img/background/preload/bg-preload-percentage90.png)");            
        } else {
            $('#preload #percentage span').html( progress + '%' );
            // $('#preload #percentage').css("background-image", "url(" + base_url + "img/background/preload/bg-preload-percentage"+ progress +".png)");
        }
    }
}

bits.main = function() {};
bits.main.prototype = {
    preload: function() {},
    create: function() {
        music.play(level);
        music.volume = 1;
        play = true;

        cursors = game.input.keyboard.createCursorKeys();
        bg = game.add.tileSprite(-30, 0, game.stage.bounds.width, game.cache.getImage('background').height, 'background');

        game.stage.disableVisibilityChange = true;
        game.stage.backgroundColor = '#0a3c8c';
        game.transparent = true;
        game.physics.startSystem(Phaser.Physics.ARCADE);

        init(true);
        player.animations.play('fly');
        player.events.onAnimationComplete.add(this.onImpactsComplete, this);
    },
    update: function() {
        music.onMarkerComplete.add(this.onCompleteMusic, this);

        if (music.currentTime > 0) {
            $('#preload #percentage span').html( '100%' );
            bg.tilePosition.x -= 1;

            $('#state-game').css('margin-top', '-165px');
            $('#preload').addClass('none');
            $('#panel-user').removeClass('none').addClass('rollIn');
            $('#panel-info').removeClass('none').addClass('bounceInUp');
            $('#panel-energy').removeClass('none').addClass('bounceInUp');
            $('#instru').removeClass('none').addClass('bounceInUp');

            this.controls();

            if (state) 
                this.generate('speakers');

            if (play == true && game.time.now > timespeaker) {
                if (speakers.countLiving() < max_speakers) {
                    random_speakers = Math.random() * (max_speakers - 1) + 1;

                    for (var i = 0; i < random_speakers; i++)
                        this.generate('speakers');
                }
            }
            
            if (play == true && game.time.now > timesnak){
                if ( snaks.countLiving() < levels('countsnaks'))
                    this.generate('snaks');
            }

            if (play == true && game.time.now > timespecial && life <= 40){
                if (specials.countLiving() < 1)
                    this.generate('specials');
            }

            game.physics.arcade.overlap( speakers, player, this.onCollisionSpeaker, null, this );
            game.physics.arcade.overlap( snaks, player, this.onCollisionSnak, null, this );
            game.physics.arcade.overlap( specials, player, this.onCollisionSpecial, null, this );
        } else {
            $('#preload #percentage span').html( '98%' );
            $('#preload #percentage').css("background-image", "url(" + base_url + "img/background/preload/bg-preload-percentage90.png)");
            player.alpha = 0;
        }
    },
    controls: function() {
        player.body.velocity.y  = 0;
        player.body.velocity.x  = 0;
        player.alpha            = 1;

        if (game.input.activePointer.isDown)
            player.body.velocity.y = -200;
        else
            player.body.velocity.y = 150;

        if (cursors.up.isDown)
            player.body.velocity.y = -200;
        if (cursors.down.isDown)
            player.body.velocity.y = 150;
        if (cursors.left.isDown)
            player.body.velocity.x = -150;
        if (cursors.right.isDown)
            player.body.velocity.x = 150;
    },
    generate: function(type) {
        var randomY = Math.random() * ( (game.height - 30) - 30 ) + 30;

        if (type == 'speakers') {
            timespeaker     = game.time.now + levels('time');
            var posY     = game.world.randomY,
                valocity = levels('velocity') * 1000;

            var speaker                     = speakers.create(( game.width - 60 ), randomY, 'speaker');
            speaker.name                    = 'speaker';
            speaker.body.moves              = false;
            speaker.body.collideWorldBounds = true;

            speakers.callAll('animations.add', 'animations', 'ani_speaker', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 5, true);
            speakers.callAll('animations.play', 'animations', 'ani_speaker');

            game.add.tween(speaker).to({ x: - speaker.width }, valocity, Phaser.Easing.Linear.None, true)
                                .onUpdateCallback(function(e) {
                                    var angle   = (2 * Math.PI / ( game.width * .25 )) * speaker.x;
                                    speaker.y   = posY + 100 * Math.cos( angle - Math.PI * .5 );
                                })
                                .onComplete.add(this.onKillItem, speakers);

            state  = false;
        }

        if (type == 'snaks') {
            timesnak        = game.time.now + levels('time') + 1000;

            var valocity    = levels('velocity') * 1000;

            var snak        = snaks.create(game.width, randomY, 'snak');
            snak.name       = 'snak'
            snak.body.moves = false;

            snaks.callAll('animations.add', 'animations', 'ani_snak', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 5, true);
            snaks.callAll('animations.play', 'animations', 'ani_snak');

            game.add.tween(snak).to({ x: - snak.width }, valocity, Phaser.Easing.Linear.None, true).onComplete.add(this.onKillItem, snak);
        } 

        if (type == 'specials') {
            timespecial         = game.time.now + levels('time');

            var valocity        = levels('velocity') * 1000;

            var special         = specials.create(game.width, randomY, 'special');
            special.name        = 'special';
            special.body.moves  = false;

            specials.callAll('animations.add', 'animations', 'ani_special', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 5, true);
            specials.callAll('animations.play', 'animations', 'ani_special');

            game.add.tween(special).to({ x: - special.width }, valocity, Phaser.Easing.Linear.None, true).onComplete.add(this.onKillItem, special);
        }
    },
    onCompleteMusic: function(audio) {
        if (!pause) {
            music.pause();

            speakers.destroy();
            snaks.destroy();
            specials.destroy();

            game.paused = true;

            if (life > 0) {
                if (audio == '1' && level == 1) {
                    if (level_end == '0')
                        onRegisterPopup();
                    else
                        onFinishedPopup();    
                } else if (audio == '5' && level == 5) {
                    player.kill();
                    onFinishedLevel();
                } else
                    onFinishedPopup();
            } else
                onGameOver();
        }
    },
    onKillItem: function(item) {
        if (item.exists)
            item.kill();
    },
    onCollisionSpeaker: function(player, speaker) {
        speaker.kill();
        player.animations.play('impact');

        var value   = levels('speakers');

        if ((life - value) > 0) {
            life    = life - value;
            music.volume = ( life / 100 );

            $('#life-img').fadeIn('slwo', function() {
                $(this).css("background-image", "url(" + base_url + "img/background/bg-life" + life + ".png)");
            });  
        } else {
            life        = 0;
            play        = false;
            game.paused = false;

            music.pause();
            player.kill();
            speakers.destroy();
            snaks.destroy();
            specials.destroy();

            $('#life-img').css("background-image", "url(" + base_url + "img/background/bg-life0.png)").addClass('pulse');            
            onGameOver();
        }

        $('#life-value span').html(life);
    },
    onCollisionSnak: function(player, snak) {
        snak.kill();
        player.animations.play('eat');

        var value = levels('snaks');


        if (( life + value ) >= 100)
            life = 100;
        else
            life = life + value;

        music.volume = ( life / 100 );

        $('#life-value span').html(life);
        $('#life-img').css("background-image", "url(" + base_url + "img/background/bg-life" + life + ".png)");
    },
    onCollisionSpecial: function(player, special) {
        special.kill();
        player.animations.play('special');

        life         = 100;
        music.volume = ( life / 100 );

        $('#life-value span').html(life);
        $('#life-img').css("background-image", "url(" + base_url + "img/background/bg-life100.png)").addClass('pulse');
    },
    onImpactsComplete: function(sprite) {
        player.animations.stop();
        player.animations.play('fly');
    },
    render: function() {}
}

function init(type) {
    if (type) {
        player = game.add.sprite(150, 150, 'dux');
        game.physics.enable( player, Phaser.Physics.ARCADE );

        player.body.collideWorldBounds = true;
        player.anchor.setTo(0.5, 0.5);
        player.animations.add('fly', [ 0, 1, 2 ], 10, true);
        player.animations.add('eat', [ 3, 4 ], 10, false);
        player.animations.add('impact', [ 6, 7 ], 10, false, true);
        player.animations.add('special', [ 3, 4, 5 ], 10, false);
    }

    speakers                   = game.add.group();
    speakers.name              = 'speakers';
    speakers.enableBody        = true;
    speakers.physicsBodyType   = Phaser.Physics.ARCADE;
    speakers.createMultiple(1, 'speaker');
    speakers.setAll('outOfBoundsKill', true);
    speakers.setAll('body.collideWorldBounds', true);

    snaks                   = game.add.group();
    snaks.name              = 'snaks';
    snaks.enableBody        = true;
    snaks.physicsBodyType   = Phaser.Physics.ARCADE;
    snaks.createMultiple(1, 'snak');
    snaks.setAll('outOfBoundsKill', true);

    specials                   = game.add.group();
    specials.name              = 'specials';
    specials.enableBody        = true;
    specials.physicsBodyType   = Phaser.Physics.ARCADE;
    specials.createMultiple(1, 'special');
    specials.setAll('outOfBoundsKill', true);

    max_speakers = levels('countspeakers');
}

function levels(type) {
    if (type == 'speakers') {
        if (level == '1')                  return 5;
        if (level == '2')                  return 10;
        if (level == '3')                  return 15;
        if (level == '4' || level == '5')  return 20;
    }

    if (type == 'snaks') {
        if (level == '1')                  return 20;
        if (level == '2')                  return 15;
        if (level == '3')                  return 10;
        if (level == '4' || level == '5')  return 5;
    }

    if (type == 'velocity') {
        if (level == '1') return Math.random() * ( 30 - 5 ) + 5;
        if (level == '2') return Math.random() * ( 25 - 5 ) + 5;
        if (level == '3') return Math.random() * ( 20 - 5 ) + 5;
        if (level == '4') return Math.random() * ( 25 - 5 ) + 5;
        if (level == '5') return Math.random() * ( 40 - 5 ) + 5;
    }

    if (type == 'time') {
        if (level == '1') return ( Math.random() * ( 30 - 5 ) + 5 ) * 100;
        if (level == '2') return ( Math.random() * ( 25 - 5 ) + 5 ) * 100;
        if (level == '3') return ( Math.random() * ( 20 - 5 ) + 5 ) * 100;
        if (level == '4') return ( Math.random() * ( 15 - 5 ) + 5 ) * 100;
        if (level == '5') return ( Math.random() * ( 10 - 5 ) + 5 ) * 100;
    }

    if (type == 'countspeakers') {
        if (level == '1') return 2;
        if (level == '2') return 3;
        if (level == '3') return 3;
        if (level == '4') return 4;
        if (level == '5') return 5;   
    }

    if (type == 'countsnaks') {
        if (level == '1') return 2 * 1;
        if (level == '2') return 4 * 2;
        if (level == '3') return 6 * 3;
        if (level == '4') return 8 * 4;
        if (level == '5') return 10 * 5;
    }
}

game.state.add( 'load', bits.load, true );
game.state.add( 'main', bits.main );
